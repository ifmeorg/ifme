#!/usr/bin/env bash
# taken from https://gist.github.com/gvarela/9370838

{
  RUBY_VERSION=$(cat .ruby-version)
  RUBY_VERSION=${RUBY_VERSION:=2.3.0}
  PROJECT_NAME="ifme"
} >/dev/null 2>&1

## bootstrap function called at bottom of file comment out verification steps you don't need
init (){
  verify_ruby_version &&
    verify_bundled_gems
  verify_env_file
  copy_example_config_files
  verify_postgres_running &&
    verify_database_migrations
}


## utility functions to test dependencies
is_darwin (){
  PLATFORM=$(uname)
  [ "$PLATFORM" == "Darwin" ]
}

has_homebrew (){
  [ is_darwin ] && [ hash brew >/dev/null 2>&1 ]
}

verify_homebrew (){
  if [ ! has_homebrew ]
  then
    if [ is_darwin ]
    then
      echo 'Please install homebrew. Install instructions at http://brew.sh/'
    else
      echo "Please install Ruby version $RUBY_VERSION"
    fi
    exit 1
  fi
}

has_postgres (){
  hash psql >/dev/null 2>&1
}

postgres_is_running (){
  ps aux | grep [p]ostgres >/dev/null 2>&1
}

has_rvm (){
  hash rvm >/dev/null 2>&1
}

update_rvm (){
  rvm get latest
}

rvm_install_ruby_version () {
  rvm install $RUBY_VERSION
}

has_rbenv (){
  hash rbenv >/dev/null 2>&1
}

update_rbenv (){
  brew update
  brew upgrade ruby-build
}

rbenv_install_ruby_version () {
  rbenv install $RUBY_VERSION
  rbenv local $RUBY_VERSION
}

has_ruby_version (){
  INSTALLED_RUBY_VERSION=$(ruby -e 'puts RUBY_VERSION')
  [ "$INSTALLED_RUBY_VERSION" == "$RUBY_VERSION" ]
}

install_ruby_version (){
  verify_homebrew

  if [ ! has_rvm ] && [ ! has_rbenv ]
  then
    echo 'Please install rbenv or rvm to manage your ruby versions.'
    exit 1
  fi

  echo "Installing Ruby Version $RUBY_VERSION"
  has_rvm && {
  update_rvm
  rvm_install_ruby_version
}

has_rbenv && {
update_rbenv
rbenv_install_ruby_version
  }
}

verify_ruby_version (){
  has_ruby_version || install_ruby_version
}

verify_bundled_gems () {
  echo 'Updating gems...'
  {
    (gem list -i bundler || gem install bundler) && bundle install
  } 2>&1
}

verify_env_file (){
  if [ ! -f .env ]
  then
    echo "Generating secret..."
    SECRET=$(bundle exec rake secret)
    echo "SECRET_KEY_BASE=$SECRET" >> .env
  fi
}


verify_postgres_running () {
  echo "Verifying postgres is running..."
  has_postgres || {
  echo 'Please install postgresql.'
  exit 1
}

postgres_is_running || {
echo 'Please ensure postgresql is running'
exit 1
  }
}

verify_database_migrations () {
  bundle exec rake db:abort_if_pending_migrations
  if [ $? -eq 1 ]
  then
    echo 'Creating the database, loading the schema and initializing it with the seed
    data'
    bundle exec rake db:setup
    if [ $? -ne 0 ]
    then
      echo 'Unable to setup the databases for you. Please ensure your
      database.yml is configured for your system and run rake db:setup'
      exit 0
    fi
  fi
}

copy_example_config_files () {
  echo "Copying example config files..."
  if [ ! -f config/database.yml ]
  then
    cp config/application.example.yml config/application.yml
  fi
  if [ ! -f config/smtp.example.yml ]
  then
    cp config/smtp.example.yml config/smtp.yml
  fi
  if [ ! -f config/database.example.yml ]
  then
    cp config/database.example.yml config/database.yml
  fi
}

# start it up!!
init
echo 'Ready !'
echo 'Run `rails s` to start the server'
